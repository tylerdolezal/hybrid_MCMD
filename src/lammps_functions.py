#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Jun 20 15:36:52 2024

@author: dolez
"""


from ase.io import read, write
import periodictable

def update_modfiles(md_params=None):

    # alphabetical list of the chemical symbols
    names = sorted(list(set(read("POSCAR", format='vasp').get_chemical_symbols())))

    with open("src/potential.mod", "r") as f:
        lines = f.readlines()
    
    lines[5] = "pair_coeff * * species "+" ".join(names)+"\n"
    if md_params:
        potential_style = md_params[2]
        if potential_style in ['eam', 'meam']:
            lines[5] = f"pair_coeff * * {''.join(names)}.{potential_style} {' '.join(names)}\n"

        else:
            lines[5] = "pair_coeff * * species "+" ".join(names)+"\n"

    with open("src/potential.mod", 'w') as f:
        f.writelines(lines)

    # Define the mapping of atomic symbols to atom types (integer values)
    atom_type_mapping = {symbol: i + 1 for i, symbol in enumerate(names)}

    masses = [(periodictable.elements.symbol(symbol).mass) for symbol in names]

    with open('src/structure.mod', 'w') as f:
        f.write('# Read data from POSCAR file\nread_data POSCAR.data\n\n')

        f.write("# Mass\n")
        for symbol, mass in zip(names, masses):
            atom_type = atom_type_mapping[symbol]
            f.write(f'mass {atom_type} {mass}\n')
        f.write('\n')

    f.close()

def poscar_to_lammps():

    afile = "POSCAR"

    # Step 1: Read atomic structure using ASE
    atoms = read(afile, format='vasp')
    names = sorted(list(set(read("POSCAR", format='vasp').get_chemical_symbols())))

    # Write the LAMMPS data file
    with open('POSCAR.data', 'w') as f:
        f.write('LAMMPS data file generated by ASE\n\n')
        f.write(f'{len(atoms)} atoms\n')
        f.write(f'{len(names)} atom types\n\n')
        # Write box dimensions, include no tilt for Triclinic lattice
        f.write(f'0.0 {atoms.cell[0][0]} xlo xhi\n')
        f.write(f'0.0 {atoms.cell[1][1]} ylo yhi\n')
        f.write(f'0.0 {atoms.cell[2][2]} zlo zhi\n')
        f.write('0.0 0.0 0.0 xy xz yz\n')

        # Define the mapping of atomic symbols to atom types (integer values)
        atom_type_mapping = {symbol: i + 1 for i, symbol in enumerate(names)}

        masses = [(periodictable.elements.symbol(symbol).mass) for symbol in names]

        # Write the 'Masses' section
        f.write('\nMasses\n\n')
        for symbol, mass in zip(names, masses):
            atom_type = atom_type_mapping[symbol]
            f.write(f'{atom_type} {mass}\n')
        f.write('\n')

        # Write the 'Atoms' section with the 'type' column
        f.write('Atoms\n\n')
        for i, atom in enumerate(atoms):
            symbol = atom.symbol
            atom_type = atom_type_mapping[symbol]
            position = atom.position
            f.write(f'{i + 1} {atom_type} {position[0]} {position[1]} {position[2]}\n')

        f.close()


def cleanup_contcar():

    with open('CONTCAR.data', 'r') as f:
        lines = f.readlines()

    header = []
    masses_section = []
    atoms_section = []
    velocities_section = []
    reading_atoms = False
    reading_velocities = False

    for line in lines:
        if 'Atoms' in line:
            reading_atoms = True
            reading_velocities = False
            atoms_section.append(line)
        elif 'Velocities' in line:
            reading_atoms = False
            reading_velocities = True
            velocities_section.append(line)
        elif reading_atoms:
            if line.strip():
                atoms_section.append(line)
        elif reading_velocities:
            if line.strip():
                velocities_section.append(line)
        else:
            if 'Masses' in line:
                masses_section.append(line)
            elif masses_section:
                masses_section.append(line)
            else:
                header.append(line)

    # Sort the atoms section based on the first number in each line
    atoms_section = [atoms_section[0]+"\n"] + sorted(atoms_section[1:], key=lambda x: int(x.split()[0]))

    # Sort the velocities section based on the first number in each line
    velocities_section = [velocities_section[0]+"\n"] + sorted(velocities_section[1:], key=lambda x: int(x.split()[0]))

    # Write the sorted data back to a new file
    with open('CONTCAR.data', 'w') as f:
        for line in header:
            f.write(line)

        for line in masses_section:
            f.write(line)
        f.write('\n')

        for line in atoms_section:
            f.write(line)
        f.write('\n')

        for line in velocities_section:
            f.write(line)


def lammps_to_poscar():

    names = sorted(list(set(read("POSCAR", format='vasp').get_chemical_symbols())))

    cleanup_contcar()

    atoms = read("CONTCAR.data", format='lammps-data', atom_style='atomic')

    """
    # recent ASE update gets the atomic types right
    for atom in atoms:
        atom.symbol = names[atom.number - 1]  # atom.number is 1-based
    """
    afile = "CONTCAR"
    write(afile, atoms, format='vasp', direct=True, sort=True)

def update_md_input_file(params, threshold=0.0):
    # params = (md_steps, md_temperature)

    if int(params[0]) == int(0):
        dir = "no_MD"
    else:
        dir = "w_MD"

    template_file = f"src/{dir}/MD_template.in"
    output_file = "MD.in"

    with open(template_file, 'r') as file:
        script = file.read()

    # Update the temperature in the script
    script = script.replace('TEMP_INIT', str(float(params[1])))
    script = script.replace('TEMP_FINAL', str(float(params[1])))
    script = script.replace('STEPS', str(int(params[0])))
    script = script.replace('FREEZE_THRESHOLD', str(float(threshold)))

    with open(output_file, 'w') as file:
        file.write(script)

    # params = (md_steps, md_temperature)
    template_file = f"src/{dir}/relax-0_template.in"
    output_file = "relax-0.in"

    with open(template_file, 'r') as file:
        script = file.read()

    # Update the temperature in the script
    script = script.replace('TEMP_INIT', str(float(params[1])))
    script = script.replace('TEMP_FINAL', str(float(params[1])))
    script = script.replace('STEPS', str(int(params[0])))
    script = script.replace('FREEZE_THRESHOLD', str(float(threshold)))

    with open(output_file, 'w') as file:
        file.write(script)

    # params = (md_steps, md_temperature)
    template_file = f"src/{dir}/relax_template.in"
    output_file = "relax.in"

    with open(template_file, 'r') as file:
        script = file.read()

    # Update the temperature in the script
    script = script.replace('TEMP_INIT', str(float(params[1])))
    script = script.replace('TEMP_FINAL', str(float(params[1])))
    script = script.replace('FREEZE_THRESHOLD', str(float(threshold)))

    with open(output_file, 'w') as file:
        file.write(script)

    # params = (md_steps, md_temperature)
    template_file = f"src/{dir}/static_relax_template.in"
    output_file = "static_relax.in"

    with open(template_file, 'r') as file:
        script = file.read()

    # Update the temperature in the script
    script = script.replace('TEMP_INIT', str(float(params[1])))
    script = script.replace('TEMP_FINAL', str(float(params[1])))
    script = script.replace('FREEZE_THRESHOLD', str(float(threshold)))

    with open(output_file, 'w') as file:
        file.write(script)
